{
    "swagger": "2.0",
    "info": {
        "description": "Backend API built with Golang using Clean Code architecture. \\nGithub: [https://github.com/kannan112/mock-trading-platform-api].",
        "title": "Trading Platform Backend API",
        "contact": {
            "name": "For API Support",
            "email": "abhinandarun11@gmail.com"
        }
    },
    "paths": {
        "/api/auth/login": {
            "post": {
                "description": "user login  email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login User",
                "parameters": [
                    {
                        "description": "User login details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Registers a new user with a username, email, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/request.RegisterUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/response.Response"
                        }
                    }
                }
            }
        },
        "/api/market-data": {
            "get": {
                "description": "Opens a WebSocket connection to stream real-time market data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get real-time market data stream",
                "responses": {}
            }
        },
        "/api/market-live": {
            "get": {
                "description": "HTML page to test WebSocket connection",
                "consumes": [
                    "text/html"
                ],
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "WebSocket Test Page",
                "responses": {
                    "200": {
                        "description": "HTML page",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "request.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "request.RegisterUserRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "confirm_password": {
                    "description": "Ensures passwords match",
                    "type": "string"
                },
                "email": {
                    "description": "Validates email format",
                    "type": "string"
                },
                "password": {
                    "description": "Ensures password is at least 8 characters",
                    "type": "string",
                    "minLength": 8
                },
                "username": {
                    "description": "Ensures username is alphanumeric and within length limits",
                    "type": "string",
                    "maxLength": 20,
                    "minLength": 3
                }
            }
        },
        "response.Response": {
            "type": "object",
            "properties": {
                "data": {},
                "error": {},
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Add prefix of Bearer before  token Ex: \"Bearer token\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}