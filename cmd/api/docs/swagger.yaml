definitions:
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  request.OrderRequest:
    properties:
      symbol:
        description: Asset symbol (e.g., "BTCUSDT")
        type: string
      type:
        description: 'Order type: "buy" or "sell"'
        type: string
      volume:
        description: Quantity to buy or sell
        type: number
    required:
    - symbol
    - type
    - volume
    type: object
  request.RegisterUserRequest:
    properties:
      confirm_password:
        description: Ensures passwords match
        type: string
      email:
        description: Validates email format
        type: string
      password:
        description: Ensures password is at least 8 characters
        minLength: 8
        type: string
      username:
        description: Ensures username is alphanumeric and within length limits
        maxLength: 20
        minLength: 3
        type: string
    required:
    - confirm_password
    - email
    - password
    - username
    type: object
  response.Response:
    properties:
      data: {}
      error: {}
      message:
        type: string
      success:
        type: boolean
    type: object
info:
  contact:
    email: abhinandarun11@gmail.com
    name: For API Support
  description: 'Backend API built with Golang using Clean Code architecture. \nGithub:
    [https://github.com/kannan112/mock-trading-platform-api].'
  title: Trading Platform Backend API
paths:
  /api/auth/login:
    post:
      consumes:
      - application/json
      description: user login  email, and password
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Login User
      tags:
      - User
  /api/auth/register:
    post:
      consumes:
      - application/json
      description: Registers a new user with a username, email, and password
      parameters:
      - description: User registration details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/request.RegisterUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register a new user
      tags:
      - User
  /api/market-data:
    get:
      consumes:
      - application/json
      description: Opens a WebSocket connection to stream real-time market data
      produces:
      - application/json
      responses: {}
      summary: Get real-time market data stream
      tags:
      - market-data
  /api/market-live:
    get:
      consumes:
      - text/html
      description: HTML page to test WebSocket connection
      produces:
      - text/html
      responses:
        "200":
          description: HTML page
          schema:
            type: string
      summary: WebSocket Test Page
      tags:
      - market-data
  /api/order:
    post:
      consumes:
      - application/json
      description: Place a buy/sell order with the given details and fetch market
        data from Binance API.
      parameters:
      - description: Order request details
        in: body
        name: orderRequest
        required: true
        schema:
          $ref: '#/definitions/request.OrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order placed successfully
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Invalid order type
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Failed to fetch market data
          schema:
            $ref: '#/definitions/response.Response'
      summary: Place an order
      tags:
      - orders
securityDefinitions:
  BearerAuth:
    description: 'Add prefix of Bearer before  token Ex: "Bearer token"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
